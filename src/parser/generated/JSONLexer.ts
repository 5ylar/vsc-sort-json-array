// Generated from src/parser/JSON.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly CLOSING_CURLIES = 7;
	public static readonly OPENING_CURLIES = 8;
	public static readonly COLON = 9;
	public static readonly STRING = 10;
	public static readonly NUMBER = 11;
	public static readonly WS = 12;
	public static readonly ErrorCharacter = 13;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "CLOSING_CURLIES", "OPENING_CURLIES", 
		"COLON", "STRING", "STRINGCHARS", "ESC", "UNICODE", "HEX", "SAFECODEPOINT", 
		"NUMBER", "INT", "EXP", "WS", "ErrorCharacter",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'true'", "'false'", "'null'", "','", "'['", "']'", "'}'", 
		"'{'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"CLOSING_CURLIES", "OPENING_CURLIES", "COLON", "STRING", "NUMBER", "WS", 
		"ErrorCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0F\x8F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x05\vP\n\v\x03\f\x03\f\x07\fT\n\f\f\f\x0E\fW\v\f" +
		"\x03\r\x03\r\x03\r\x05\r\\\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x05\x11i\n\x11\x03\x11" +
		"\x03\x11\x03\x11\x06\x11n\n\x11\r\x11\x0E\x11o\x05\x11r\n\x11\x03\x11" +
		"\x05\x11u\n\x11\x03\x12\x03\x12\x03\x12\x07\x12z\n\x12\f\x12\x0E\x12}" +
		"\v\x12\x05\x12\x7F\n\x12\x03\x13\x03\x13\x05\x13\x83\n\x13\x03\x13\x03" +
		"\x13\x03\x14\x06\x14\x88\n\x14\r\x14\x0E\x14\x89\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x02\x02\x02\x16\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\x02" +
		"\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\r#\x02\x02%\x02" +
		"\x02\'\x02\x0E)\x02\x0F\x03\x02\n\n\x02$$11^^ddhhppttvv\x05\x022;CHch" +
		"\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x05\x02" +
		"\v\f\x0F\x0F\"\"\x02\x93\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02" +
		"\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02" +
		"\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02" +
		"\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03+\x03\x02\x02\x02\x050\x03" +
		"\x02\x02\x02\x076\x03\x02\x02\x02\t;\x03\x02\x02\x02\v=\x03\x02\x02\x02" +
		"\r?\x03\x02\x02\x02\x0FA\x03\x02\x02\x02\x11C\x03\x02\x02\x02\x13E\x03" +
		"\x02\x02\x02\x15O\x03\x02\x02\x02\x17U\x03\x02\x02\x02\x19X\x03\x02\x02" +
		"\x02\x1B]\x03\x02\x02\x02\x1Dc\x03\x02\x02\x02\x1Fe\x03\x02\x02\x02!h" +
		"\x03\x02\x02\x02#~\x03\x02\x02\x02%\x80\x03\x02\x02\x02\'\x87\x03\x02" +
		"\x02\x02)\x8D\x03\x02\x02\x02+,\x07v\x02\x02,-\x07t\x02\x02-.\x07w\x02" +
		"\x02./\x07g\x02\x02/\x04\x03\x02\x02\x0201\x07h\x02\x0212\x07c\x02\x02" +
		"23\x07n\x02\x0234\x07u\x02\x0245\x07g\x02\x025\x06\x03\x02\x02\x0267\x07" +
		"p\x02\x0278\x07w\x02\x0289\x07n\x02\x029:\x07n\x02\x02:\b\x03\x02\x02" +
		"\x02;<\x07.\x02\x02<\n\x03\x02\x02\x02=>\x07]\x02\x02>\f\x03\x02\x02\x02" +
		"?@\x07_\x02\x02@\x0E\x03\x02\x02\x02AB\x07\x7F\x02\x02B\x10\x03\x02\x02" +
		"\x02CD\x07}\x02\x02D\x12\x03\x02\x02\x02EF\x07<\x02\x02F\x14\x03\x02\x02" +
		"\x02GH\x07$\x02\x02HI\x05\x17\f\x02IJ\x07$\x02\x02JP\x03\x02\x02\x02K" +
		"L\x07)\x02\x02LM\x05\x17\f\x02MN\x07)\x02\x02NP\x03\x02\x02\x02OG\x03" +
		"\x02\x02\x02OK\x03\x02\x02\x02P\x16\x03\x02\x02\x02QT\x05\x19\r\x02RT" +
		"\x05\x1F\x10\x02SQ\x03\x02\x02\x02SR\x03\x02\x02\x02TW\x03\x02\x02\x02" +
		"US\x03\x02\x02\x02UV\x03\x02\x02\x02V\x18\x03\x02\x02\x02WU\x03\x02\x02" +
		"\x02X[\x07^\x02\x02Y\\\t\x02\x02\x02Z\\\x05\x1B\x0E\x02[Y\x03\x02\x02" +
		"\x02[Z\x03\x02\x02\x02\\\x1A\x03\x02\x02\x02]^\x07w\x02\x02^_\x05\x1D" +
		"\x0F\x02_`\x05\x1D\x0F\x02`a\x05\x1D\x0F\x02ab\x05\x1D\x0F\x02b\x1C\x03" +
		"\x02\x02\x02cd\t\x03\x02\x02d\x1E\x03\x02\x02\x02ef\n\x04\x02\x02f \x03" +
		"\x02\x02\x02gi\x07/\x02\x02hg\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x03" +
		"\x02\x02\x02jq\x05#\x12\x02km\x070\x02\x02ln\t\x05\x02\x02ml\x03\x02\x02" +
		"\x02no\x03\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02\x02pr\x03\x02\x02" +
		"\x02qk\x03\x02\x02\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02su\x05%\x13" +
		"\x02ts\x03\x02\x02\x02tu\x03\x02\x02\x02u\"\x03\x02\x02\x02v\x7F\x072" +
		"\x02\x02w{\t\x06\x02\x02xz\t\x05\x02\x02yx\x03\x02\x02\x02z}\x03\x02\x02" +
		"\x02{y\x03\x02\x02\x02{|\x03\x02\x02\x02|\x7F\x03\x02\x02\x02}{\x03\x02" +
		"\x02\x02~v\x03\x02\x02\x02~w\x03\x02\x02\x02\x7F$\x03\x02\x02\x02\x80" +
		"\x82\t\x07\x02\x02\x81\x83\t\b\x02\x02\x82\x81\x03\x02\x02\x02\x82\x83" +
		"\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x85\x05#\x12\x02\x85&\x03" +
		"\x02\x02\x02\x86\x88\t\t\x02\x02\x87\x86\x03\x02\x02\x02\x88\x89\x03\x02" +
		"\x02\x02\x89\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x8B\x03\x02" +
		"\x02\x02\x8B\x8C\b\x14\x02\x02\x8C(\x03\x02\x02\x02\x8D\x8E\v\x02\x02" +
		"\x02\x8E*\x03\x02\x02\x02\x0F\x02OSU[hoqt{~\x82\x89\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}


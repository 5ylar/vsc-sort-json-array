// Generated from src/parser/JSON.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JSONLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly CLOSING_CURLIES = 8;
	public static readonly OPENING_CURLIES = 9;
	public static readonly COLON = 10;
	public static readonly STRING = 11;
	public static readonly NUMBER = 12;
	public static readonly WS = 13;
	public static readonly ErrorCharacter = 14;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "CLOSING_CURLIES", 
		"OPENING_CURLIES", "COLON", "STRING", "STRINGCHARS_DOUBLE", "STRINGCHARS_SINGLE", 
		"ESC", "UNICODE", "HEX", "SAFECODEPOINT", "NUMBER", "INT", "EXP", "WS", 
		"ErrorCharacter",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'true'", "'false'", "'null'", "'undefined'", "','", "'['", 
		"']'", "'}'", "'{'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "CLOSING_CURLIES", "OPENING_CURLIES", "COLON", "STRING", "NUMBER", 
		"WS", "ErrorCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JSONLexer._LITERAL_NAMES, JSONLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JSONLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JSONLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JSON.g4"; }

	// @Override
	public get ruleNames(): string[] { return JSONLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JSONLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JSONLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JSONLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10\xAC\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f^\n\f\x03" +
		"\r\x03\r\x03\r\x05\rc\n\r\x03\r\x07\rf\n\r\f\r\x0E\ri\v\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x05\x0En\n\x0E\x03\x0E\x07\x0Eq\n\x0E\f\x0E\x0E\x0Et\v\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x05\x0Fy\n\x0F\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x05\x13\x86\n" +
		"\x13\x03\x13\x03\x13\x03\x13\x06\x13\x8B\n\x13\r\x13\x0E\x13\x8C\x05\x13" +
		"\x8F\n\x13\x03\x13\x05\x13\x92\n\x13\x03\x14\x03\x14\x03\x14\x07\x14\x97" +
		"\n\x14\f\x14\x0E\x14\x9A\v\x14\x05\x14\x9C\n\x14\x03\x15\x03\x15\x05\x15" +
		"\xA0\n\x15\x03\x15\x03\x15\x03\x16\x06\x16\xA5\n\x16\r\x16\x0E\x16\xA6" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x02\x02\x02\x18\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!" +
		"\x02\x02#\x02\x02%\x02\x0E\'\x02\x02)\x02\x02+\x02\x0F-\x02\x10\x03\x02" +
		"\f\n\x02$$11^^ddhhppttvv\x05\x02\x02!$$^^\n\x02))11^^ddhhppttvv\x05\x02" +
		"\x02!))^^\x05\x022;CHch\x03\x022;\x03\x023;\x04\x02GGgg\x04\x02--//\x05" +
		"\x02\v\f\x0F\x0F\"\"\x02\xB3\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02%\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x03/\x03" +
		"\x02\x02\x02\x054\x03\x02\x02\x02\x07:\x03\x02\x02\x02\t?\x03\x02\x02" +
		"\x02\vI\x03\x02\x02\x02\rK\x03\x02\x02\x02\x0FM\x03\x02\x02\x02\x11O\x03" +
		"\x02\x02\x02\x13Q\x03\x02\x02\x02\x15S\x03\x02\x02\x02\x17]\x03\x02\x02" +
		"\x02\x19g\x03\x02\x02\x02\x1Br\x03\x02\x02\x02\x1Du\x03\x02\x02\x02\x1F" +
		"z\x03\x02\x02\x02!\x80\x03\x02\x02\x02#\x82\x03\x02\x02\x02%\x85\x03\x02" +
		"\x02\x02\'\x9B\x03\x02\x02\x02)\x9D\x03\x02\x02\x02+\xA4\x03\x02\x02\x02" +
		"-\xAA\x03\x02\x02\x02/0\x07v\x02\x0201\x07t\x02\x0212\x07w\x02\x0223\x07" +
		"g\x02\x023\x04\x03\x02\x02\x0245\x07h\x02\x0256\x07c\x02\x0267\x07n\x02" +
		"\x0278\x07u\x02\x0289\x07g\x02\x029\x06\x03\x02\x02\x02:;\x07p\x02\x02" +
		";<\x07w\x02\x02<=\x07n\x02\x02=>\x07n\x02\x02>\b\x03\x02\x02\x02?@\x07" +
		"w\x02\x02@A\x07p\x02\x02AB\x07f\x02\x02BC\x07g\x02\x02CD\x07h\x02\x02" +
		"DE\x07k\x02\x02EF\x07p\x02\x02FG\x07g\x02\x02GH\x07f\x02\x02H\n\x03\x02" +
		"\x02\x02IJ\x07.\x02\x02J\f\x03\x02\x02\x02KL\x07]\x02\x02L\x0E\x03\x02" +
		"\x02\x02MN\x07_\x02\x02N\x10\x03\x02\x02\x02OP\x07\x7F\x02\x02P\x12\x03" +
		"\x02\x02\x02QR\x07}\x02\x02R\x14\x03\x02\x02\x02ST\x07<\x02\x02T\x16\x03" +
		"\x02\x02\x02UV\x07$\x02\x02VW\x05\x19\r\x02WX\x07$\x02\x02X^\x03\x02\x02" +
		"\x02YZ\x07)\x02\x02Z[\x05\x1B\x0E\x02[\\\x07)\x02\x02\\^\x03\x02\x02\x02" +
		"]U\x03\x02\x02\x02]Y\x03\x02\x02\x02^\x18\x03\x02\x02\x02_b\x07^\x02\x02" +
		"`c\t\x02\x02\x02ac\x05\x1F\x10\x02b`\x03\x02\x02\x02ba\x03\x02\x02\x02" +
		"cf\x03\x02\x02\x02df\n\x03\x02\x02e_\x03\x02\x02\x02ed\x03\x02\x02\x02" +
		"fi\x03\x02\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02\x02h\x1A\x03\x02\x02" +
		"\x02ig\x03\x02\x02\x02jm\x07^\x02\x02kn\t\x04\x02\x02ln\x05\x1F\x10\x02" +
		"mk\x03\x02\x02\x02ml\x03\x02\x02\x02nq\x03\x02\x02\x02oq\n\x05\x02\x02" +
		"pj\x03\x02\x02\x02po\x03\x02\x02\x02qt\x03\x02\x02\x02rp\x03\x02\x02\x02" +
		"rs\x03\x02\x02\x02s\x1C\x03\x02\x02\x02tr\x03\x02\x02\x02ux\x07^\x02\x02" +
		"vy\t\x02\x02\x02wy\x05\x1F\x10\x02xv\x03\x02\x02\x02xw\x03\x02\x02\x02" +
		"y\x1E\x03\x02\x02\x02z{\x07w\x02\x02{|\x05!\x11\x02|}\x05!\x11\x02}~\x05" +
		"!\x11\x02~\x7F\x05!\x11\x02\x7F \x03\x02\x02\x02\x80\x81\t\x06\x02\x02" +
		"\x81\"\x03\x02\x02\x02\x82\x83\n\x03\x02\x02\x83$\x03\x02\x02\x02\x84" +
		"\x86\x07/\x02\x02\x85\x84\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86" +
		"\x87\x03\x02\x02\x02\x87\x8E\x05\'\x14\x02\x88\x8A\x070\x02\x02\x89\x8B" +
		"\t\x07\x02\x02\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A" +
		"\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8F\x03\x02\x02\x02\x8E\x88" +
		"\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x91\x03\x02\x02\x02\x90\x92" +
		"\x05)\x15\x02\x91\x90\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92&\x03" +
		"\x02\x02\x02\x93\x9C\x072\x02\x02\x94\x98\t\b\x02\x02\x95\x97\t\x07\x02" +
		"\x02\x96\x95\x03\x02\x02\x02\x97\x9A\x03\x02\x02\x02\x98\x96\x03\x02\x02" +
		"\x02\x98\x99\x03\x02\x02\x02\x99\x9C\x03\x02\x02\x02\x9A\x98\x03\x02\x02" +
		"\x02\x9B\x93\x03\x02\x02\x02\x9B\x94\x03\x02\x02\x02\x9C(\x03\x02\x02" +
		"\x02\x9D\x9F\t\t\x02\x02\x9E\xA0\t\n\x02\x02\x9F\x9E\x03\x02\x02\x02\x9F" +
		"\xA0\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\xA2\x05\'\x14\x02\xA2" +
		"*\x03\x02\x02\x02\xA3\xA5\t\v\x02\x02\xA4\xA3\x03\x02\x02\x02\xA5\xA6" +
		"\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA8" +
		"\x03\x02\x02\x02\xA8\xA9\b\x16\x02\x02\xA9,\x03\x02\x02\x02\xAA\xAB\v" +
		"\x02\x02\x02\xAB.\x03\x02\x02\x02\x13\x02]begmprx\x85\x8C\x8E\x91\x98" +
		"\x9B\x9F\xA6\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JSONLexer.__ATN) {
			JSONLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JSONLexer._serializedATN));
		}

		return JSONLexer.__ATN;
	}

}

